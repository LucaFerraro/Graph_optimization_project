reset;
reset option;

model 2_Camajori_10584438_LR_arc.mod;

data instanceNORBP2.dat;

option solver 'cplex';
option cplex_options 'timelimit=600'; # in seconds

# Definition of the Lagrangian Relaxation problem
problem LR: x, y, z, LR_objective_lambda, load_balance, node_capacity;

# Paramters for LR
param MAXITER := 10;
param tic;
param toc;
param LR_time;
param iter default 1;
param Feasible default 1;

# To print all lagrangian multipliers. 
param PrintMultipliers default 0; 

# To print all steps of lagrangian multipliers update procedure. 
param PrintSteps default 0; 

printf"\n-----------------------------------------------------------------------------\n" > results_2.txt;
printf"  		Lagrangian Relaxation relaxing arc_capacity constraint through lambda[i,j]  \n" > results_2.txt;
printf"-----------------------------------------------------------------------------\n" > results_2.txt;

# Initialize the Lagrangian Relaxation
printf"Initial LB and UB\n" > results_2.txt;
param LB_LR default 0;
display LB_LR > results_2.txt;

param UB_LR default (sum {i in N} c[i] + sum {k in D, (i,j) in A} g[i,j]);
display UB_LR > results_2.txt;

param norma default 1;

let t := 1;

let tic := _ampl_user_time;

repeat {

	  display iter;
	  
	  let Feasible := 1;
	  
	  if (PrintSteps != 0) then{
	  		printf"\n\nIteration %d ... \n",iter > results_2.txt;
	  }
	  
	  # Assign initial values to multipliers
	  solve LR;
	  display LR_objective_lambda;
	  
	  # Check for feasibility
	  for {(i,j) in A} 
	  {
	  		if (sum {k in D} x[i,j,k]*d[k] > uu ) then
			{
				let Feasible:= 0;
				break;
			}
	  }
	  
	  if (Feasible == 1) then
	  {
	  		printf"\nFEASIBLE!\n";
	  		
		    # Update upper bound 
		  	let UB_LR := min(UB_LR, sum {i in N} c[i]*y[i] + sum {k in D, (i,j) in A} x[i,j,k]*g[i,j]);
		  	
		  	if (PrintSteps != 0) then{
		  		printf"\n Improving feasible solution found - value: %g", UB_LR > results_2.txt;
		  	}
	  }
	  
	  # Update step size
	  let t := 0.8*t;
	  
	  # Trials
	  #if abs((LB_LR - LR_objective_lambda)/(LB_LR+0.000001)) <= 0.0001 then{
	  #	let t := t*10;
	  #}
	  #else{
	  #	let t := 0.8*t;
	  #}
	 
	  #if LB_LR - LR_objective_lambda >= 0.01 then{
	  #	let t := (2/(iter));
	  #}
	  
	  # let t := 1/(iter+1);
	  # let t := 1/sqrt(iter);
	 
	  # Update lower bound
	  let LB_LR := max(LB_LR, LR_objective_lambda);  
	  
	  if (PrintSteps != 0) then{
	  		printf"\n Current best lower bound %g", LB_LR > results_2.txt;
	  } 
	
	  # Update multipliers
	  let {(i,j) in A} lambda_old[i,j] := lambda[i,j];
	  
	  let norma := sqrt(  sum {(i,j) in A}( (sum {k in D}(x[i,j,k]*d[k] - uu))^2 )  );
	  
	  # Print complementary slackness condition
	  display sum {(i,j) in A}( lambda[i,j] * (sum {k in D}(x[i,j,k]*d[k] - uu)) );
	  	  
	  if ( sum {(i,j) in A}( lambda[i,j] * (sum {k in D}(x[i,j,k]*d[k] - uu)) ) == 0 and Feasible == 1) then {
	  	# display y, z, x;
	  	printf"\n Optimum reached!\n";
	  	let Feasible := 2;
	  	break
	  }
	  
	  display t/norma;
	
	  let {(i,j) in A} lambda[i,j] := max(0, lambda_old[i,j] + t * (sum {k in D}(x[i,j,k]*d[k] - uu))/norma);
	  #let {(i,j) in A} lambda[i,j] := max(0, lambda_old[i,j] + t * (sum {k in D}(x[i,j,k]*d[k] - uu)));
	  
	  if (PrintMultipliers != 0) then{
	  	printf{(i,j) in A} ("\n Updated multipliers %g and step %g \n"), lambda[i,j], t > results_2.txt;
	  	}
	  	
	  let iter := iter + 1; 
	
	  
}while (iter < MAXITER and Feasible != 2);

let toc := _ampl_user_time + _total_solve_user_time;

let LR_time := toc - tic;


printf"-----------------------------------------------------------------------------\n" > results_2.txt;

printf"Lagrangian Relaxation relaxing arc_capacity constraint through lambda[i,j]:\n\n" > results_2.txt;

printf"LR_lambda: UB %g - LB %g - time %g - iter %g\n\n", UB_LR, LB_LR, LR_time, iter >results_2.txt;




















