reset;

model 4_Camajori_10584438_Random_Rounding.mod;

data instanceAB1.dat;

option solver 'cplex';
option cplex_options 'timelimit=600'; # in seconds

# Definition of the partial_CR problem
problem partial_CR: x_CR, y_CR, z_CR, Cost_CR, load_balance_CR, node_capacity_CR, arc_capacity_CR, consistency_Z_Y_CR;

# Paramters for computational time
param tic;
param toc;
param Randomized_Rounding_time;

param MaxIter default card(N)*100;


#current partial solution
let CZ := {};
let CX := {};

let PI := {};
let PJ := {};
let PD := {};

# index to randomize 
param index;
param index2;
param index3;


# random parameter
param r default 0;

# cost of the LP relaxation
param continuousRel_cost default 0;
# cost of the solution obtained with randomized rounding
param randRound_cost default 0;


printf"-----------------------------------------------------------------------------\n" > results_4.txt;
printf"                           Initial values \n" > results_4.txt;
printf"-----------------------------------------------------------------------------\n\n" > results_4.txt;

display card(CZ) > results_4.txt;
display card(CX) > results_4.txt;



printf"\n" > results_4.txt;


printf"-----------------------------------------------------------------------------\n" > results_4.txt;
printf"                		   Randomized Rounding \n" > results_4.txt;
printf"-----------------------------------------------------------------------------\n\n" > results_4.txt;

#number of Randomized Rounding iterations
param iter default 0;
let tic := _ampl_user_time;

repeat{

   let iter := iter + 1;
   	
   # Solve the LP relaxation
   solve partial_CR;

   printf"  					        Iteration %d \n",iter > results_4.txt;
   printf"     ------------------------------------------------------------------- \n\n" > results_4.txt;
      
   printf"\n" > results_4.txt;
   
   printf"Solved the current LP relaxation\n" > results_4.txt;
   
   display y_CR > results_4.txt;
       
   display Cost_CR > results_4.txt;
   
  
   
   # Put in CZ the demand-facilities with z^*=1
   let CZ := CZ union {setof {k in D, i in N: z_CR[k,i] = 1} (k,i)}; 
   
   # Put in CX the arc-demand with x^*=1
   let CX := CX union {setof {(i,j) in A, k in D: x_CR[i,j,k] = 1} (i,j,k)};
      
   printf"Updated CZ:\n\n" > results_4.txt;
   printf"Updated CX:\n\n" > results_4.txt;
		
   display card(CZ) > results_4.txt;
 
   let PD := PD union {setof {k in D, i in N: 0 < z_CR[k,i] < 1} k};      
   let PI := PI union {setof {k in D, i in N: 0 < z_CR[k,i] < 1} i}; 
     
   # If no fractionary zki
   if card(PD) != 0 then{
	   repeat{
		
		# select a random index
	   	let index := member(int(Uniform(1,card(PD))),PD);
	   	let index2 := member(int(Uniform(1,card(PI))),PI);
		
		# remove it
	   	let PI := PI diff {index2};
		
		# generate a random value r between 0 and 1 
	   	let r := Uniform(0,1);
	   	
	   	printf "Demand-Facility considered %4d: prob=%f z=%f ", index, r, z_CR[index, index2] > results_4.txt;
		
		# add Demand-Facility index to the solution if z^*[index, index2] > r
	   	if r <= z_CR[index,index2] then 
	   	{
	    	let CZ := CZ union {(index,index2)};
	      	printf " -> added to the Demand-Facility\n" > results_4.txt;	
	   	}
	   	else
	   		printf"\n" > results_4.txt;
	   	 
	   }while (card(PI) > 0);
   }

   
   let PI := {};
   let PI := PI union {setof {(i,j) in A, k in D: 0 < x_CR[i,j,k] < 1} i};
   
   # If all the xijk and zki are integer, we know that yi are integer and so we go out from the while
   if card(PI) == 0 and card(PD) == 0 then{
   		break
   }
    
   
   let PJ := {};
   let PD := {};
	
   let PJ := PJ union {setof {(i,j) in A, k in D: 0 < x_CR[i,j,k] < 1} j};
   let PD := PD union {setof {(i,j) in A, k in D: 0 < x_CR[i,j,k] < 1} k};
   
   repeat{
	
	# select a random index
   	let index := member(int(Uniform(1,card(PI))),PI);
   	let index2 := member(int(Uniform(1,card(PJ))),PJ);
   	let index3 := member(int(Uniform(1,card(PD))),PD);
	
	# remove it from PX
   	let PI := PI diff {index};
   	let PJ := PJ diff {index2};
   	let PD := PD diff {index3};
	
	# generate a random value r between 0 and 1 
   	let r := Uniform(0,1);
   	
   	printf "Arc-Demand considered %4d: prob=%f x=%f ", index, r, x_CR[index, index2, index3] > results_4.txt;
	
	# add Arc-Demand index to the solution if x^*[index, index2, index3] > r
   	if r <= x_CR[index, index2, index3] then 
   	{
    	let CX := CX union {(index, index2, index3)};
      	printf " -> added to the Arc-Demand\n" > results_4.txt;	
   	}
   	else
   		printf"\n" > results_4.txt;
   	 
   }while (card(PI) > 0);
   
   # Fix variables for next problem
   fix {(k,i) in CZ} z_CR[k,i] := 1;
   fix {(i,j,k) in CX} x_CR[i,j,k] := 1;
   
   printf"\n" > results_4.txt;
   
   printf"Updated CZ:\n\n" > results_4.txt;
   display card(CZ) > results_4.txt;
   printf"Updated CX:\n\n" > results_4.txt;
   display card(CX) > results_4.txt;
      
   
} while (iter < MaxIter);

let toc := _ampl_user_time + _total_solve_user_time;
let Randomized_Rounding_time := toc - tic;

printf"\n" > results_4.txt;

printf"                      Final composition of variables \n" > results_4.txt;
printf"     ------------------------------------------------------------------- \n\n" > results_4.txt;



display card(CZ) > results_4.txt;
display card(CX) > results_4.txt;

display y_CR > results_4.txt;
display z_CR > results_4.txt;
#Â display x_CR > results_4.txt;

let randRound_cost := sum{i in N} y_CR[i]*c[i] + sum {(i,j,k) in CX} g[i,j];

printf"\n\nRandomized Rounding cost %f", randRound_cost > results_4.txt;
printf"\n\nTime Randomized Rounding  %f", Randomized_Rounding_time > results_4.txt;









