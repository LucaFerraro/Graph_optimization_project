reset;
reset option;
option solver 'cplex';

model parameterDefinition.mod;
model 5_Camajori_10584438_Greedy.mod;

model 5_Camajori_10584438_Greedy_SP.mod;
problem SP: x_SP, SPCost, balance; 

data instanceAB1.dat;


param iter default 0;

param greedySol default 0;

param tic default 0;
param toc;
param Greedy_time;

param Feasible default 1;

# To print all steps of greedy procedure. 
param PrintSteps default 0;


# Current partial solution
let Y := {}; # yi
let Z := {}; # zki 
let X := {}; # xijk

# Initialize Auxiliary Set of Destinations
let Dest := {};

# Initialize Arc spare capacity
let {i in N} C_spare[i] := cap[i];


printf"-----------------------------------------------------------------------------\n" > results_5.txt;
printf"                		   Greedy  \n" > results_5.txt;
printf"-----------------------------------------------------------------------------\n\n" > results_5.txt;

let tic := _ampl_user_time;  


# If an Open facility in each node can serve its own demand (Not considered in ILP)
/*
for {k in D, i in N: o[k] = i}{
	if C_spare[i] >= d[k] then{
		let Y := Y union {i};
		let Z := Z union {(k,i)};
		let C_spare[i] := C_spare[i] - d[k];
		
	}
	let iter := iter + 1;
}
*/


display Y;
display Z;
display X;
print(card(Z));
print(iter);
  
for {k in D_uncovered}
{
   		
   		let s_SP:= o[k];
   		
   		# Destination opened with enough spare capacity
   		let Dest:= setof{i in Y: C_spare[i] >= d[k]} i;
   		
   		# If there is at least one element in Dest
   		if card(Dest) != 0 then 
   		{	
   			for {destination in Dest}
   			{
   					
   				# Solving shortest path + capacity problem
	   			let dst_SP:= destination;
	   			let demand_SP := d[k];
	   			let {(i,j) in A} arc_cap_SP[i,j] := C_spare_arc[i,j];
	   			solve SP;
	   			
	   			# Updating parameters and sets:
	   			for{(i,j) in A, k2 in D}
	   			{
	   				if x_SP[i,j] == 1 and k2 == k then
	   				{
	   					let X := X union {(i,j,k2)};
	   					
	   					if PrintSteps == 1 then 
	   					{
	   						printf"\n\nx[%d,%d,%d] = 1", i,j,k2  > results_5.txt;
	   					}
	   				}
	   			}

	   			let Z := Z union {(k,dst_SP)};
	   			let {(i,j) in A: x_SP[i,j] = 1} C_spare_arc[i,j] :=  C_spare_arc[i,j] - d[k];
 				let C_spare[dst_SP] := C_spare[dst_SP] - d[k];
	   			
	   			# Stopping:
	   			break;
	   				  	
	   		}
	   	}
	   		
   		else 
   		{
   		
   			let Dest:= {i in Y_closed: c[i] == min{l in Y_closed} c[l]};
   			
   			for {dest in Dest}
   			{
   			
   				# Solving shortest path + capacity problem
   				let dst_SP := dest;
   				let demand_SP := d[k];
   				let {(i,j) in A} arc_cap_SP[i,j] := C_spare_arc[i,j];
   				solve SP;
   				
   				# Updating parameters and sets:
	   			for{(i,j) in A, k2 in D}
	   			{
	   				if x_SP[i,j] == 1 and k2 == k then
	   				{
	   					let X := X union {(i,j,k2)};
	   					
	   					if PrintSteps == 1 then 
	   					{
	   						printf"\n\nx[%d,%d,%d] = 1", i,j,k2  > results_5.txt;
	   					}
	   				}
	   			}
	   			let Z := Z union {(k,dst_SP)};
	   			let Y := Y union {dst_SP};
	   			let {(i,j) in A: x_SP[i,j] = 1} C_spare_arc[i,j] :=  C_spare_arc[i,j] - d[k];
 				let C_spare[dst_SP] := C_spare[dst_SP] - d[k];
 				
 				# Stopping:
 				break;
   			}		   		
   		}
   		

	let iter := iter + 1;
	if (PrintSteps != 0) then
	{
		   printf"  					        Iteration %d \n",iter > results_5.txt;
		   printf"     ------------------------------------------------------------------- \n\n" > results_5.txt;
		      
		   printf"\n" > results_5.txt;
		   
		   printf"\n\nUpdated opened facilities Y:\n\n" > results_5.txt;
		   for{i in Y} printf"%d   ", i > results_5.txt; 
		  
		   printf"\n\nUpdated pair demand-facility_destination Z:\n\n" > results_5.txt;
		   for{(k,i) in Z} printf"(%d %d)  ", k, i > results_5.txt; 
		    
		   printf"\n\nUpdated arc-demands:\n\n" > results_5.txt;
		   for{(i,j,k) in X} printf"(%d %d %d)   ", i, j, k > results_5.txt;
   	}
}
   	

   		
let toc := _ampl_user_time + _total_solve_user_time;
let Greedy_time := toc - tic;

printf"\n" > results_5.txt;

printf"                      Final composition of variables \n" > results_5.txt;
printf"     ------------------------------------------------------------------- \n\n" > results_5.txt;
   
   
   
let greedySol := greedySol + sum {i in Y} c[i]+ sum {(i,j,k) in X} g[i,j];  
   

display Y, card(Y) > results_5.txt;
display Z, card(Z) > results_5.txt;
#display X > results_5.txt;
   
printf"\n\nGreedy cost %f", greedySol > results_5.txt;
printf"\n\nTime Greedy  %f", Greedy_time > results_5.txt; 
printf"\n\nIterations  %f", iter > results_5.txt;  
   




 




